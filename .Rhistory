B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[20:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l')
points(log(ca_deaths$value+1),cex=.2,col='red')
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+5)))
points(log(ca_deaths$value+1),cex=.2,col='red')
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=100,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
tmp[20:]colMeans(fit_yhat$Y_hat_cases)
colMeans(fit_yhat$Y_hat_cases)
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
source('~/chapter3/splines_no_log.R', echo=TRUE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
num_data
length(ca_cases$value)
49-20
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1),cex=.2,col='red')
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(ca_deaths$value+1)[20:],cex=.2,col='red')
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],cex=.2,col='red')
sm<-stan_model("splines_no_log.stan")
fit<-sampling(sm,iter=1000,chains=1,data=list(y_deaths=log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],
y_cases=log(pmax(0,ca_cases$value)+1),
n=nrow(ca_deaths),
offset=20,
day_of_week = rep(1:7,length.out=nrow(ca_deaths)),
num_data=num_data,
num_basis_cases=num_basis,
num_basis_deaths=num_basis,
X_cases=X,
X_cases_new=X_new,
B_cases=B_cases,
B_cases_predict=B_predict_cases,
X_deaths=X,
X_deaths_new=X_new,
B_deaths=B_deaths,
B_deaths_predict=B_predict_deaths,
mask_pred=mask_w_pred),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
plot(c(colMeans(fit_yhat$Y_hat_cases),colMeans(fit_yhat$pred_cases)),type='l',ylim=c(0,max(log(ca_cases$value))))
points(log(ca_cases$value),cex=.2,col='red')
points(seq(nrow(ca_deaths)+1,nrow(ca_deaths)+28),validation_cases$value,col='blue',cex=.2)
plot(c(colMeans(fit_yhat$Y_hat_deaths)),type='l',ylim=c(0,max(log(ca_deaths$value+1)+2)))
points(log(pmax(0,ca_deaths$value)+1)[21:length(ca_deaths$value)],cex=.2,col='red')
source('~/chapter3/plots.R', echo=TRUE)
source('~/chapter3/plots_cp.R', echo=TRUE)
cfr <- read.csv("/Users/gcgibson/cfr_numpyro/cp/cfr_cp.csv")
mb<- read.csv("/Users/gcgibson/cfr_numpyro/cp/mb_cp.csv")
cfr$model <- "cfr"
mb$model <- "mb"
library(tidyverse)
library(ggplot2)
data <-cfr %>% dplyr::left_join(mb, by=c("state","date","h"))
data_long <-rbind(cfr,mb)
data_long$h <- factor(data_long$h)
library(plyr)
data_long$h <-plyr::revalue(data_long$h , c("0"="1", "1"="2","2"="3","3"="4"))
data_long %>%  dplyr::group_by(h,model) %>% dplyr::summarize(cp=mean(cp))
source('~/chapter3/plots_cp.R', echo=TRUE)
data_long %>%  dplyr::group_by(h,model) %>% dplyr::summarize(cp=mean(cp))
panel_3 <- ggplot(data_long %>%  dplyr::group_by(h,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=h,y=cp,col=model)) + geom_point()+ ylim(c(.90,1.0))
theme_bw() + ylab("Coverage Probability 95%") + xlab("Horizon")
panel_4 <- ggplot(data_long %>%  dplyr::group_by(date,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=as.Date(date),y=cp,col=model)) + geom_point()+
theme_bw() + ylab("Coverage Probability 95%") + xlab("Forecast Date") +  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(cowplot)
full_plot <- cowplot::plot_grid(panel_3+theme(legend.position = "none"),
panel_4+theme(legend.position = "none"),ncol=2,align = 'vh')
full_plot
theme_bw() + ylab("Coverage Probability 95%") + xlab("Horizon") + theme_bw()
panel_4 <- ggplot(data_long %>%  dplyr::group_by(date,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=as.Date(date),y=cp,col=model)) + geom_point()+
theme_bw() + ylab("Coverage Probability 95%") + xlab("Forecast Date") +  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(cowplot)
full_plot <- cowplot::plot_grid(panel_3+theme(legend.position = "none"),
panel_4+theme(legend.position = "none"),ncol=2,align = 'vh')
full_plot
panel_3
panel_3 <- ggplot(data_long %>%  dplyr::group_by(h,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=h,y=cp,col=model)) + geom_point()+ ylim(c(.90,1.0))
theme_bw() + ylab("Coverage Probability 95%") + xlab("Horizon")
panel_3
panel_4 <- ggplot(data_long %>%  dplyr::group_by(date,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=as.Date(date),y=cp,col=model)) + geom_point()+
theme_bw() + ylab("Coverage Probability 95%") + xlab("Forecast Date") +  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
panel_3 <- ggplot(data_long %>%  dplyr::group_by(h,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=h,y=cp,col=model)) + geom_point()+ ylim(c(.90,1.0))
panel_3 <- ggplot(data_long %>%  dplyr::group_by(h,model) %>% dplyr::summarize(cp=mean(cp)),aes(x=h,y=cp,col=model)) + geom_point()+ ylim(c(.90,1.0)) +
theme_bw() + ylab("Coverage Probability 95%") + xlab("Horizon")
panel_3
source('~/chapter3/plots_cp.R', echo=TRUE)
dir <- read.csv("/Users/gcgibson/cfr_numpyro/dirichlet_post")
dim(dir)
dir
library(reticulate)
np <- import("numpy")
dir <- np$load("/Users/gcgibson/cfr_numpyro/dirichlet_post")
dim(dir)
dir <- np$load("/Users/gcgibson/cfr_numpyro/dirichlet_post",allow_pickle = T)
dir <- np$load("/Users/gcgibson/cfr_numpyro/dirichlet_post",allow_pickle = T)
dir <- np$load("/Users/gcgibson/cfr_numpyro/dirichlet_post.npz.npy",allow_pickle = T)
dim(dir)
df_ <- data.frame(x=1:40,y=colMeans(dir))
df_
library(ggplot2)
ggplot(df_,aes(x=x,y=y)) + geom_bar()
ggplot(df_,aes(x=x,y=y)) + geom_density()
ggplot(df_,aes(x=x,y=y)) + line()
ggplot(df_,aes(x=x,y=y)) + geom_line()
ggplot(df_,aes(x=x,y=rev(y))) + geom_line()
ggplot(df_,aes(x=x,y=rev(y))) + geom_line() + theme_bw()
ggplot(df_,aes(x=x,y=rev(y))) + geom_line() + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death <- ggplot(df_,aes(x=x,y=rev(y))) + geom_line() + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death <- ggplot(df_,aes(x=x,y=rev(y)),fill=1) + geom_line() + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death
ggsave("/Users/gcgibson/cfr_numpyro/time_to_death",time_to_death)
ggsave("/Users/gcgibson/cfr_numpyro/time_to_death",time_to_death,device = "png")
source('~/chapter3/plots_cases.R', echo=TRUE)
df_full <- data.frame(x=rep(1:40,2000),y=c(dir))
library(ggplot2)
df_full <- data.frame(x=rep(1:40,2000),y=c(dir),group=rep(1:2000,each=40))
time_to_death_total <- ggplot(df_full,aes(x=x,y=y) + geom_line() + theme_bw() + xlab("t") + ylab("P(T=t)")
)
time_to_death_total <- ggplot(df_full,aes(x=x,y=y)) + geom_line() + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death_total
time_to_death_total <- ggplot(df_full,aes(x=x,y=y,group=group)) + geom_line() + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death_total
time_to_death_total <- ggplot(df_full,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death_total
df_full <- data.frame(x=rep(1:40,2000),y=c(t(dir)),group=rep(1:2000,each=40))
time_to_death_total <- ggplot(df_full,aes(x=x,y=y,group=group)) + geom_line(alpha=.1) + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death_total
time_to_death_total <- ggplot(df_full,aes(x=x,y=y,group=group)) + geom_line(alpha=.9) + theme_bw() + xlab("t") + ylab("P(T=t)")
time_to_death_total
data %>% dplyr::group_by(state) %>% dplyr::summarize(mae.x = mean(mae.x),mae.y=mean(mae.y))
