start_day = "2020-03-15", end_day = "2020-12-10",
geo_type = "state", geo_values = "ca")
write.csv(ca_cases,"ca_cases.csv")
plot(ca_cases)
plot(ca_cases$value)
cases <- ca_cases$value
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(-5,5,1), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
a0 <- 0.2 # intercept
a <- rnorm(num_basis, 0, 1) # coefficients of B-splines
Y_true <- as.vector(a0*X + a%*%B) # generating the output
Y <- Y_true + rnorm(length(X),0,.2) # adding noise
plot(Y)
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(-5,5,1), degree=3, intercept = TRUE)) # creating the B-splines
B
num_data <- length(X);
num_basis <- nrow(B)
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
cases <- ca_cases$value[100:110]
cases
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(-5,5,1), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
lines(cases)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
B <- t(bs(X, knots=seq(0,10,by=2), degree=3, intercept = TRUE)) # creating the B-splines
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(0,10,by=2), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
plot(colMeans(fit_yhat))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
B
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
plot(cases)
plot(colMeans(fit_yhat))
lines(cases)
cases <- ca_cases$value[100:200]
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(0,10,by=2), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
lines(cases)
cases <- ca_cases$value
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(0,10,by=2), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
lines(cases)
plot(colMeans(fit_yhat),type='l',col='r')
plot(colMeans(fit_yhat),type='l',col='red')
lines(cases)
source('~/chapter3/basis.R', echo=TRUE)
plot(colMeans(fit_yhat),type='l',col='red')
lines(cases)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
cases <- ca_cases$value
X <- seq(1:length(cases)) # generating inputs
B <- t(bs(X, knots=seq(0,length(cases),by=2), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases),
control = list(adapt_delta=0.95))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat),type='l',col='red')
lines(cases)
source('~/chapter3/basis.R', echo=TRUE)
plot(colMeans(fit_yhat),type='l',col='red')
lines(cases)
plot(colMeans(fit_yhat),type='l',col='red')
points(cases)
lines(apply(fit_yhat,2,quantile))
apply(fit_yhat,2,quantile)
apply(fit_yhat,2,quantile)$.95
apply(fit_yhat,2,quantile)
apply(fit_yhat,2,quantile)[1,]
rownames(apply(fit_yhat,2,quantile))
lines(apply(fit_yhat,2,quantile(probs=.95)))
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.95)}))
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.95)}))
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
points(cases,size=.2)
?points
points(cases,pch=list(pointsize=.2))
X_new <- seq(length(cases),length(cases) +10)
fit<-sampling(sm,iter=500,data=list(X=X,
B=B,
num_basis=num_basis,
num_data=num_data,a0=a0,a=a,
cases=cases,
X_new=X_new),
control = list(adapt_delta=0.95))
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
fit_yhat
fit
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
dim(B)
length(cases)
tail(1:length(B),11)
B_new <- B[,tail(1:length(B),11)]
B
dim(B)
B_new <- B[1:32,tail(1:length(B),11)]
tail(1:length(B),11)
tail(1:ncol(B),11)
B_new <- B[1:32,tail(1:ncol(B),11)]
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
dim(B)
length(seq(0,length(cases),by=10))
B <- t(bs(X, knots=seq(0,length(cases),by=100), degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
length(cases)
seq(0,length(cases),by=100)
source('~/chapter3/basis.R', echo=TRUE)
xtract(fit,pars=c(),
permuted = TRUE, include = FALSE)
extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$pred_hat
fit_pred_hat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$pred_hat
plot(colMeans(fit_pred_hat),type='l',col='red')
fit_yhat
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
fit_yhat
fit_pred_hat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$pred_hat
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
fit_yhat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
fit_pred_hat <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$pred_hat
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
plot(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
lines(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
B <- t(bs(X, knots=seq(0,length(cases),by=10), degree=3, intercept = TRUE)) # creating the B-splines
B_new <-  t(bs(X_new, knots=1, degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
X <- seq(1:(length(cases)+10)) # generating inputs
B <- t(bs(X, knots=seq(0,length(cases),by=10), degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
dim(B)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
B_new
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
num_knots <- seq(0,length(cases),by=30)
source('~/chapter3/basis.R', echo=TRUE)
1:num_knots
num_knots
num_knots
num_knots <- length(seq(0,length(cases),by=30))
X <- seq(1:(length(cases)+10)) # generating inputs
B <- t(bs(X, knots=num_knots, degree=3, intercept = TRUE)) # creating the B-splines
num_data <- length(X);
num_basis <- nrow(B)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X[1:271],
B=B[1:num_knots,1:271],
num_basis=num_basis,
num_data=271,a0=a0,a=a,
cases=cases,
X_new=X_new,
B_new=B[1:num_knots,271:281]),
control = list(adapt_delta=0.95))
num_knots
dim(B)
fit<-sampling(sm,iter=500,data=list(X=X[1:271],
B=B[:,1:271],
num_basis=num_basis,
num_data=271,a0=a0,a=a,
cases=cases,
X_new=X_new,
B_new=B[:,271:281]),
control = list(adapt_delta=0.95))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sm<-stan_model("spline_basis.stan")
fit<-sampling(sm,iter=500,data=list(X=X[1:271],
B=B[,1:271],
num_basis=num_basis,
num_data=271,a0=a0,a=a,
cases=cases,
X_new=X_new,
B_new=B[,271:281]),
control = list(adapt_delta=0.95))
dim(B)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
points(cases)
?points
points(cases,pch=2)
?points
points(cases,cex=2)
points(cases,cex=.02)
plot(colMeans(fit_yhat),type='l',col='red')
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
points(cases,cex=.02)
lines(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
points(cases,cex=.2)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
num_knots
num_knots <- length(seq(0,length(cases),by=1))
num_knots
num_knots <- length(seq(0,length(cases),by=2))
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
num_knots
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
plot(colMeans(fit_yhat),type='l',col='red')
#lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
#lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
points(cases/max(cases),cex=.2)
lines(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$a_raw
mean(extract(fit,pars=c(),
permuted = TRUE, include = FALSE)$a_raw)
dim(B)
num_knots
cases <- ca_cases$value
num_knots <-  length(cases)
X <- seq(1:(length(cases)+10)) # generating inputs
B <- t(bs(X, knots=num_knots, degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
B <- t(bs(X, knots=10, degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
B <- t(bs(X, knots=10, degree=3, intercept = TRUE)) # creating the B-splines
cases <- ca_cases$value
num_knots <-  length(cases)
X <- seq(1:(length(cases)+10)) # generating inputs
B <- t(bs(X, knots=10, degree=3, intercept = TRUE)) # creating the B-splines
library(splines)
B <- t(bs(X, knots=10, degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
B <- t(bs(X, knots=10, degree=3, intercept = TRUE)) # creating the B-splines
B <- t(bs(X, knots=2, degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
B <- t(bs(X, knots=50, degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
B <- t(bs(X, knots=50, degree=3, intercept = TRUE)) # creating the B-splines
X <- seq(1:(length(cases)+10)) # generating inputs
dim(B)
B <- t(bs(X, knots=seq(1,(length(cases)+10),by=10), degree=3, intercept = TRUE)) # creating the B-splines
dim(B)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
plot(colMeans(fit_yhat),type='l',col='red')
#lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
#lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
points(cases,cex=.2)
lines(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
lines(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
colMeans(fit_pred_hat)
B[,271:281]
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
ca_deaths <- covidcast_signal(data_source = "jhu-csse",
signal ="deaths_incidence_num",
start_day = "2020-03-15", end_day = "2020-12-10",
geo_type = "state", geo_values = "ca")
ca_cases <- covidcast_signal(data_source = "jhu-csse",
signal ="confirmed_incidence_num",
start_day = "2020-03-15", end_day = "2020-12-10",
geo_type = "state", geo_values = "ca")
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/basis.R', echo=TRUE)
source('~/chapter3/gp-fit-data.R', echo=TRUE)
source('~/chapter3/gp-fit-pois.R', echo=TRUE)
stan_dat <- read_rdump('gp-fit-data')
stan_dat <- read_rdump('gp-fit-data.R')
fit_pois <- stan(file="gp-fit-pois.stan.R",
data=stan_dat,
iter=200, chains=3)
print(fit_pois, c('rho','alpha','a'))
fit_pois <- stan(file="gp-fit-pois.stan.R",
data=stan_dat,
iter=200, chains=3)
fit_pois <- stan(file="gp-fit-pois.stan",
data=stan_dat,
iter=200, chains=3)
print(fit_pois, c('rho','alpha','a'))
fit_post <- extract(fit,pars=c(),
permuted = TRUE, include = FALSE)
fit_post <- extract(fit_pois,pars=c(),
permuted = TRUE, include = FALSE)
source('~/chapter3/gp-fit-pois.R', echo=TRUE)
stan_dat <- read_rdump('gp-fit-data.R')
fit_predict <- stan(file="gp-predict.stan",
data=stan_dat,
iter=200, chains=3);
fit_predict <- stan(file="gp-fit-pois.stan",
data=stan_dat,
iter=200, chains=3);
fit_yhat <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
fit_yhat$y2
fit_yhat <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)$Y_hat
plot(colMeans(fit_yhat))
fit_yhat
extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
tmp <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
fit_yhat <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)$y2
plot(colMeans(fit_yhat))
points(stan_dat$y1)
extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
fit_yhat <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)$f
plot(colMeans(fit_yhat))
points(stan_dat$y1)
stan_dat
stan_dat$N1
plot(stan_dat$x1,stan_dat$y1)
plot(colMeans(fit_yhat))
#points(stan_dat$y1)
points(stan_dat$x1,stan_dat$y1)
#points(stan_dat$y1)
points(stan_dat$x1,stan_dat$y1)
#points(stan_dat$y1)
plot(stan_dat$x1,stan_dat$y1)
dim(fit_yhat)
length(stan_dat$y1)
tmp <-  extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
fit_yhat <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)$f
fit_yhat
dim(fit_yhat)
fit_yhat <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)$f
plot(colMeans(fit_yhat))
fit_yhat
dim(fit_yhat)
stan_dat$x1
stan_dat$y1
#points(stan_dat$y1)
plot(stan_dat$x1,stan_dat$y1)
stan_dat
#points(stan_dat$y1)
plot(stan_dat$x1,stan_dat$y1)
tmp <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
tmp
tmp <- extract(fit_predict,pars=c(),
permuted = TRUE, include = FALSE)
tmp$f
plot(tmp$f)
plot(colMeans(tmp$f))
plot(rowMeans(tmp$f))
lines(stan_dat$y1)
plot(log(cases))
source('~/chapter3/basis.R', echo=TRUE)
plot(colMeans(fit_yhat),type='l',col='red')
plot(exp(colMeans(fit_yhat)),type='l',col='red')
#lines(apply(fit_yhat,2,function(x){quantile(x,probs=.975)}))
#lines(apply(fit_yhat,2,function(x){quantile(x,probs=.025)}))
points(cases,cex=.2)
lines(seq(length(cases),length(cases)+10),colMeans(fit_pred_hat),type='l',col='blue')
source('~/chapter3/basis.R', echo=TRUE)
dexp(0:4,21)
dexp(0:4,21)
dexp(1:4,21)
options("scipen"=100, "digits"=4)
dexp(1:4,21)
dexp(0:4,21)
dexp(0:4,21)
